################################################################################### DOCKER CLI
docker login $REGISTRY
docker images #show all images
docker ps -a #show all containers

docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}'
docker build -t flifotoapve:latest -f .\SITA.APVE.FLIFOToAPVeInterface.API\dockerfile .
#common-build
docker build \
--build-arg BASE_IMAGE=${BASE_IMAGE} \
--build-arg NEXUS_BASE_URL=${NEXUS_URL} \
--build-arg NEXUS_URL=${NEXUS_URL} \
--build-arg YUM_USER=${YUM_USER} \
--build-arg YUM_PW=${YUM_PW} \
-f ${CI_JOB_NAME}.Dockerfile \
-t "${PUSH_IMAGE}" .
-------------------------DELETE DELETE---------------------
#remove everything (locally)
docker system prune -a

#remove all containers that are status of exited
docker rm $(docker ps -a -f status=exited -q)

docker image rm 365e93629424

//start container from image and leaving it running
docker run -di IMAGE

#remove recent
docker image prune -a --force --filter "until=$(date -d "-40 min" "+%Y-%m-%dT%I:%M:%S")"

#remove old (240 hours=10 days)
docker image prune -a --force --filter "until=240h"

#remove via ancestor - Note the id originates from the IMAGE ID in images
docker rm -f $(docker ps -aq -f ancestor=afef2a13711c)
#Better just to by repository name instead of the ID
docker rm -f $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/build:9.0.1"))
docker rm -f $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/app-base:9.0.1"))
#also note can be done without the version
docker rm -f $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/cfal/cpp-base-forge9-devel"))
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
docker container inspect --format '{{json .}}' $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/app-base:9.0.1"))

docker run -a STDIN docker.zmtrwe.com/forge/build:9.0.1 --directory / -tag TEST
docker run -it flifotoapve -p 80:8080 443:4433

#entrypoints to just say sh
docker run -it --entrypoint sh --user root --workdir /root docker.zmtrwe.com/forge/build:9.0.1
docker run -it --entrypoint sh --user developer --workdir /home/developer docker.zmtrwe.com/forge/build:9.0.1

# mounting desktop (with a bunch of rpms there)
docker run -v `pwd`:/opt/LOCALDESKTOP -v /home/matt/Source/cfal-demo-cpp-2/:/opt/cfal-demo --env-file /home/matt/Source/cfal-demo-cpp-2/cfal.env --rm -it docker.zmtrwe.com/cfaljenkins/cpp-forge10-devel:3.4.24 sh

docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -lq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/sdk:10.0.0"))
docker inspect -f '{{json .Config.Labels}}' $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/sdk:10.0.0")) | jq .
docker inspect -f '{{json .Config.Labels}}' $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/sdk:10.0.0")) | jq . | grep 'openshift\|vcs\|sha'

docker exec -it $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/sdk:10.0.0")) sh

  docker volume create java-jdk15
      docker run --rm -d --mount source=java-jdk15,destination=/opt/MOUNT docker.zmtrwe.com/library/openjdk:15 cp -r /usr/java/openjdk-15/ /opt/MOUNT/
      docker run -d docker.zmtrwe.com/library/openjdk:15
      docker export $(docker ps -lq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/library/openjdk:15")) -o test.tar
      docker volume inspect java-jdk15
      ls -alt /var/lib/docker/volumes
	  
#3a exec into it (if needed)
docker exec -it $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/sdk:10.0.0")) sh
#3b get files from container into host - Puts into current directory hence the "."
docker cp $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/sdk:10.0.0")):/opt/cpp-client .
#4 to get rid of it
docker rm $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/sdk:10.0.0"))

#exec back into the container
docker start $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/app-base:9.0.1"))
docker start --detach-keys='Ctrl-d,_' 4dc8ba8f6b50
docker exec -it $(docker ps -aq -f ancestor=$(docker images -aq -f "reference=docker.zmtrwe.com/forge/app-base:9.0.1")) bash



##docker run with a mount and volume bind
docker run --mount source=CFAL,destination=/opt/demo-mount -v `pwd`:/opt/cfal-demo/ -it docker.zmtrwe.com/cfaljenkins/cpp-forge10-devel:3.3.20 sh

#volume bind desktop
docker run -v `pwd`:/opt/mattDesktop --rm -it docker.zmtrwe.com/cfaljenkins/cpp-forge10-devel:3.4.24 sh

--------------------------------------------
docker run (with specified environment file)
#ENSURE THAT THE CURRENT WORKING DIRECTORY IS THE PROJECTS DIRECTORY WHEN ATTEMPTING TO RUN!
docker run -v `pwd`:/opt/cfal-app-status-cpp -it --entrypoint sh --user root --workdir /opt/cpp-client docker.zmtrwe.com/forge/app-base:9.0.1
docker run --env-file /home/matthew.kaelber/Desktop/Docker/dev.env -v `pwd`:/opt/cfal-data-access/ -it docker.zmtrwe.com/cfal/cpp-centos-devel:1.4.122
docker run --env-file /home/matthew.kaelber/Desktop/Docker/demo.env -it docker.zmtrwe.com/cfal/cpp-centos-devel:1.4.130

#ensure user.name is correct here and that the dev.env file exists in the path (run=create+start)
docker run --name Base --env-file /home/matthew.kaelber/Desktop/Docker/dev.env -it base:0.1.1